
cardStartingSymbol = 1;
baseSollution: [
	[1,  3]
	[1,  2]
	[2,  3]
]
currentlyAddedCard = 3;
connectedCards = [];
restrictedSymbols = [];
symbols = Array(n).fill().map((_, index) => index + 1);
desiredNumberOfSymbolsOnACard = input
alreadyUsedSymbols = [];


10. Take a base simplest sollution:
1  3
1  2
2  3

20. Add a card with a cardStartingSymbol.
30. cardStartingSymbol++;
40. Fill connectedCards array (where connected cards are 
indexes of arrays containing cardStartingSymbol)
50. Fill restrictedSymbols (where restricted symbols are 
all symbols contained by cards having a cardStartingSymbol)
60. Add used symbol to alreadyUsedSymbols if it is not there,
70. Search for first not restricted symbol included in alreadyUsedSymbols and set it to 
nextSymbolToUse. 
80. If nextSymbolToUse is still not defined, generate a next symbol and set it under nextSymbolToUse,
85. add nextSymbolToUse to alreadyUsedSymbols
90. Add nextSymbolToUse to created card and find newlyAddedConnections with cards that were added by adding the symbol to 
newly created card.
100. If newlyAddedConnections is empty, get first not connected card and add nextSymbolToUse to this card.
110. Fill restrictedSymbols and connectedCards
120. If any of cards has more symbols that desiredNumberOfSymbolsOnACard, throw an error informing, that 
alg did not work for this instance
130. If any of symbols repetes on all cards more times than desiredNumberOfSymbolsOnACard, 
throw an error informing, that alg did not work for this instance.
140. If each cards length equals desiredNumberOfSymbolsOnACard and each symbol repetes desiredNumberOfSymbolsOnACard,
check if solution is valid. If so, END. Else throw error informing that alg did not find a valid solution 
for this certai instance.




10. Take a base simplest sollution:
1  3
1  2
2  3

20. Add a card with a cardStartingSymbol.
30. cardStartingSymbol++;
40. Fill connectedCards array (where connected cards are 
indexes of arrays containing cardStartingSymbol)
50. Fill restrictedSymbols (where restricted symbols are 
all symbols contained by cards having a cardStartingSymbol)
60. Find firstNotConnectedCard
70. Find firstNotRestrictedSymbol
80. Connect firstNotConnectedCard with firstNotRestrictedSymbol to 
currentlyAddedCard
90. Update connectedCards and restrictedSymbols
100. If some cards are still not connected go to 60
110. If all cards have the same number of symbols there is a part sollution
120. If all symbols repete on each card exectly the same ammount of times, 
there is a full sollution.
130. If all cards have the same number of symbols and this number is 
equal to the desiredNumberOfSymbolsOnACard, then this is the 
desired sollution.
140. If 100, 110, 120, 130 are not met, then go to 20. Else 
END.


start solution
do
	Add new card
	insert start symbol
	increase start symbol
	fill connected cards, fill restricted symbols
	do
		find first not connected card and first not restricted symbol
		connect not connected card
		fill connected cards, fill restricetd symbols
		if (first not restricted symbol === undefined) error
	while first not connected card != -1
	add created card to te solution, and set [] to addedCard
	if (partial solutino) yield partialSolution
	
	if (symbol repeats too many times) error 
	if (card has too many symbols) error
	if (newly added connections === 0 and first not connected card === -1) error
while not final solution
