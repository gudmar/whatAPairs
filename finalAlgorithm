



Starting point is first sollution:
1   3
1   2
3   2

Lets add a card. Lets start adding symbols from 1, and each new card will start with next symbol:
1   3
1   2
3   2
1
New card is already connected to cards:
[1, 2]
Restricted symbols are all symbols contained in cards 1 and 2. If any of restricted symbols is used, more then 1
symbol will repete on some cards, and we will never reach our sollution. So restricted symbols are:
[1, 2, 3]

In order to connect our 4th card to last already existing (3th) a new symbol is needed. It will be 4.
1)  1   3
2)  1   2
3)  3   2   4
4)  1   4
There is one card with 3 symbols and rest cards contain only 2 symbols, and this is not acceptable. However 
our sollution is not ready yeat. All cards will be connected and all symbols will be filled in all cards only for 
even situations (with even number of symbols on cards).

Lets add a next card. We could try to add next 1, but lets increment a symbol we start a new card each time we add this card.
There is one more limitation. Each symbol will always repete the ammout of times equal to the number of symbols on each card.
In our instance, we are creating 4 symbol cards, so each symbol will repete only 4 times. With 6 symbols on a card,
each symbol will repete only 6 times on all cards together.

So lets start a new card with symbol 2:
1)  1   3
2)  1   2
3)  3   2   4
4)  1   4
5)  2
Our card is already connected to:
[2, 3]
and our restricted symbols array looks like this:
[1, 2, 3, 4]
All those symbols appear on each card that uses 2.

When we analize situation, it turns out, that symbols on all cards are restricted! We cannot conenct to any card with
1, 2, 3 and 4. We need another symbol. It will be 5:
1)  1   3   5
2)  1   2
3)  3   2   4
4)  1   4
5)  2   5

Now we are connected to cards 
[1, 2, 3]
so we need a connection to card (4), but all symbols are restricted. If we use 5 once more, it will duplicate usage of 1
Restricted symbols are:
[1, 2, 3, 4, 5]
We need 6:
1)  1   3   5
2)  1   2
3)  3   2   4
4)  1   4   6
5)  2   5   6
and connected cards in this move are: [1, 2, 3, 4]
restricted symbols are: [1, 2, 3, 4, 5, 6]
There is a gap. We could fill it with some dummy symbol to create a simple 'demo' game, but lets head for 
a valid sollution

Lets add 6th card. Previous card was stared with 2, lets start our card with 3 then:
1)  1   3   5
2)  1   2   
3)  3   2   4
4)  1   4   6
5)  2   5   6
6)  3
Connected cards: 
[1, 3]
restricted symbols:
[1, 2, 3, 4, 5]
Connecting 6th card with second one requires usage of first not restircted symbol from set [1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D].
Yes, we will use all 13 symbols, and there will be 13 cards with 4 symbols on each.
So lets add symbol (6) to our card:

1)  1   3   5
2)  1   2   
3)  3   2   4
4)  1   4   6
5)  2   5   6
6)  3   6
Now we have connected cards:
[1, 3, 4, 5]
restricted symbols:
[1, 2, 3, 4, 5, 6]

We cannot connect to card 2 without a new symbol, so lets add symbol 7:
1)  1   3   5
2)  1   2   7
3)  3   2   4
4)  1   4   6
5)  2   5   6
6)  3   6   7
Now we have connected cards:
[1, 2, 3, 4, 5]
restricted symbols:
[1, 2, 3, 4, 5, 6]

Wow. I did not expect that :). There is some sollution for odd number of symbols on a card. It has 
6 cards and 3 symbols on each. However there are different numbers of each symbol.
symbol      repetitions:
 1              3
 2              3
 3              3
 4              2
 5              2
 6              3
 7              2
To make each symbol repete the same number of times in all cards lets curry on with our algorithm:


===========================


Lets add a card to our sollution:
1)  1   3   5
2)  1   2   7
3)  3   2   4
4)  1   4   6
5)  2   5   6
6)  3   6   7
7)  4
connected cards: [3, 4]

 



1. Restrictions: 

nrCards nrSymbols nrSymbolsOnACard
  3      3          2    1 * 2 + 1                            
                                                  
  13     13         4    3 * 4 + 1                                 
  31     31         6    5 * 6 + 1                              
                                                  
 cardsQuantity = symbolQuantity = symbolsOnCardQuantity * (symbolsOnCardQuantity - 1) + 1                                                 
 symbolsOnCardQuantity must be even !