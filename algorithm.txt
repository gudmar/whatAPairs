
cardStartingSymbol = 1;
baseSollution: [
	[1,  3]
	[1,  2]
	[2,  3]
]
currentlyAddedCard = 3;
connectedCards = [];
restrictedSymbols = [];
symbols = Array(n).fill().map((_, index) => index + 1);
desiredNumberOfSymbolsOnACard = input



10. Take a base simplest sollution:
1  3
1  2
2  3

20. Add a card with a cardStartingSymbol.
30. cardStartingSymbol++;
40. Fill connectedCards array (where connected cards are 
indexes of arrays containing cardStartingSymbol)
50. Fill restrictedSymbols (where restricted symbols are 
all symbols contained by cards having a cardStartingSymbol)
60. Find firstNotConnectedCard
70. Find firstNotRestrictedSymbol
80. Connect firstNotConnectedCard with firstNotRestrictedSymbol to 
currentlyAddedCard
90. Update connectedCards and restrictedSymbols
100. If some cards are still not connected go to 60
110. If all cards have the same number of symbols there is a part sollution
120. If all symbols repete on each card exectly the same ammount of times, 
there is a full sollution.
130. If all cards have the same number of symbols and this number is 
equal to the desiredNumberOfSymbolsOnACard, then this is the 
desired sollution.
140. If 100, 110, 120, 130 are not met, then go to 20. Else 
END.